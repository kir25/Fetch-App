{"version":3,"sources":["component/constants.js","component/components/Search.js","component/components/Button.js","component/components/Table.js","component/App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","PATH_SEARCH","PARAM_SEARCH","DEFAULT_QUERY","PARAM_PAGE","PARAM_HPP","DEFAULT_HPP","Search","_ref","value","onChange","children","onSubmit","react_default","a","createElement","type","className","Button","onClick","_ref$className","Table","list","onDismiss","map","item","key","objectID","href","url","title","author","components_Button","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchSearchTopStories","searchTerm","page","arguments","length","undefined","fetch","concat","then","response","json","res","setSearchTopStories","catch","error","setState","_this$state","state","result","searchKey","hits","oldHits","apdateHits","toConsumableArray","objectSpread","defineProperty","needsToSearchTopStories","onSearchSubmit","e","preventDefault","id1","_this$state2","_result$searchKey","updatedHits","filter","onSearchChange","target","_this2","_this$state3","Fragment","components_Search","component_components_Table","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_component_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1cf4f65.chunk.js","sourcesContent":["export const PATH_BASE = 'https://hn.algolia.com/api/v1';\r\nexport const PATH_SEARCH = '/search';\r\nexport const PARAM_SEARCH = 'query=';\r\nexport const DEFAULT_QUERY = 'Redux';\r\nexport const PARAM_PAGE = 'page=';\r\nexport const PARAM_HPP = 'hitsPerPage=';\r\nexport const DEFAULT_HPP = '50';","import React from 'react';\r\n\r\nconst Search = ({ value, onChange, children, onSubmit }) =>\r\n  <form onSubmit={onSubmit}>\r\n    {children}\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n    <button className=\"button-inline\" type='submit'>Click me</button>\r\n  </form>\r\n\r\n  export default Search;","import React from 'react';\r\n\r\nconst Button = ({ onClick, className = '', children }) =>\r\n    <button\r\n        onClick={onClick}\r\n        className={className}\r\n        type='button'\r\n    >\r\n        {children}\r\n    </button>\r\n\r\n    export default Button;","import React from 'react';\r\nimport Button from './Button';\r\nimport './Table.css'\r\n\r\nconst Table = ({ list, onDismiss }) =>\r\n    <div className='table'>\r\n        {list.map(item =>\r\n            (\r\n                <div key={item.objectID} className='table-row'>\r\n                    <h1 >\r\n                        <a href={item.url}>{item.title}</a>\r\n                    </h1 >\r\n                    <h1 className='aut-btn'><span className='space'> by {item.author}</span>\r\n                        <Button onClick={() => onDismiss(item.objectID)} className='button-inline btn'>\r\n                            Fling\r\n                        </Button>\r\n                    </h1>\r\n                </div>\r\n            )\r\n        )}\r\n    </div>\r\n\r\nexport default Table;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport { DEFAULT_HPP, PATH_BASE, DEFAULT_QUERY, PATH_SEARCH, PARAM_SEARCH, PARAM_PAGE, PARAM_HPP } from './constants';\nimport Search from './components/Search';\nimport Table from './components/Table';\nimport Button from './components/Button';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: null,\n      error: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n    };\n  }\n\n  componentDidMount() {\n    let { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm })\n    this.fetchSearchTopStories(searchTerm)\n  }\n\n  fetchSearchTopStories = (searchTerm, page = 0) => {\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(response => response.json())\n      .then(res => this.setSearchTopStories(res))\n      .catch(error => this.setState({ error }))\n  }\n\n  setSearchTopStories = (res) => {\n    let { result, searchKey } = this.state;\n    const { hits, page } = res;\n    const oldHits = result && result[searchKey] ? result[searchKey].hits : [];\n    const apdateHits = [...oldHits, ...hits];\n    this.setState({ result: { ...result, [searchKey]: { hits: apdateHits, page } } });\n  }\n\n  needsToSearchTopStories = (searchTerm) => {\n    let { result } = this.state;\n    return !result[searchTerm]\n  }\n\n  onSearchSubmit = (e) => {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm })\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm)\n    }\n    e.preventDefault()\n  }\n\n  onDismiss = (id1) => {\n    let { result, searchKey } = this.state;\n    const { hits, page } = result[searchKey];\n    const isNotId = item => item.objectID !== id1;\n    const updatedHits = hits.filter(isNotId);\n    this.setState({\n      result: { ...result, [searchKey]: { hits: updatedHits, page } }\n    });\n  }\n\n  onSearchChange = ({ target }) => {\n    this.setState({ searchTerm: target.value })\n  }\n\n  render() {\n    const { searchTerm, searchKey, result, error } = this.state;\n    if (error) {\n      return <h1 className='interaction'>Something is wrong</h1>\n    }\n\n    const page = (result &&\n      result[searchKey] &&\n      result[searchKey].page) || 0;\n\n    const list = (result &&\n      result[searchKey] &&\n      result[searchKey].hits) || [];\n\n    return (\n      <>\n        <Search\n          value={searchTerm}\n          onChange={this.onSearchChange}\n          onSubmit={this.onSearchSubmit}>\n          <h1>Search</h1>\n        </Search>\n\n        {result\n          &&\n          <>\n            <Table\n              list={list}\n              onDismiss={this.onDismiss} />\n            <div>\n              <Button className='button-inline btn-bott'\n                onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}>\n                More histories\n              </Button>\n            </div>\n          </>\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nif(module.hot){\n    module.hot.accept()\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}